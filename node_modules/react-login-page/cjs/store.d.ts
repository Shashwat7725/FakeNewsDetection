import React, { PropsWithChildren } from 'react';
export interface StoreContextValue<Tag extends BlockTagType> extends InitialState<Tag> {
    dispatch: React.Dispatch<Partial<InitialState<Tag>>>;
}
export type BlockTagType = keyof JSX.IntrinsicElements;
export type Index = Record<string, number>;
export type Fields = React.ReactElement<HTMLInputElement & {
    index?: number;
}>;
export type Buttons = React.ReactElement<HTMLButtonElement & {
    index?: number;
}>;
export type Blocks<Tag extends BlockTagType = 'div'> = React.ReactElement<Tag & {
    index?: number;
}>;
export interface RenderStateProps<T extends BlockTagType = 'div'> {
    $$index?: Record<string, number>;
    fields?: Record<string, Fields | null>;
    buttons?: Record<string, Buttons | null>;
    blocks?: Record<string, Blocks<T> | null>;
    extra?: Record<string, React.ReactNode>;
    [keyname: string]: any;
}
interface Control<T> {
    name: string;
    index: number;
    children?: T | null;
}
export interface InitialState<Tag extends BlockTagType = 'div'> extends RenderStateProps<Tag> {
    data: {
        fields: Control<Fields>[];
        buttons: Control<Buttons>[];
        blocks: Control<Blocks<Tag>>[];
    };
}
export declare const initialState: InitialState;
export declare const Context: React.Context<StoreContextValue<"div">>;
export declare function reducer(state: InitialState, action: Partial<RenderStateProps>): InitialState;
export declare const useStore: () => StoreContextValue<"div">;
interface ProviderProps {
    render?: any;
}
export declare const Provider: React.FC<PropsWithChildren<ProviderProps>>;
export {};
