import _extends from "@babel/runtime/helpers/extends";
import React, { createContext, useContext, useReducer } from 'react';
import { jsx as _jsx } from "react/jsx-runtime";
export var initialState = {
  index: {},
  fields: {},
  buttons: {},
  blocks: {},
  extra: {},
  data: {
    fields: [],
    buttons: [],
    blocks: []
  }
};
export var Context = /*#__PURE__*/createContext(initialState);
Context.displayName = 'Login.Context';
export function reducer(state, action) {
  var result = _extends({}, state, action, {
    $$index: _extends({}, state.$$index, action.$$index),
    fields: _extends({}, state.fields, action.fields),
    buttons: _extends({}, state.buttons, action.buttons),
    blocks: _extends({}, state.blocks, action.blocks),
    extra: _extends({}, state.extra, action.extra)
  });
  var fieldsArray = Object.keys(result.fields).map(key => {
    var _result$fields$key;
    return {
      name: key,
      index: ((_result$fields$key = result.fields[key]) == null || (_result$fields$key = _result$fields$key.props) == null ? void 0 : _result$fields$key.index) || (result.$$index || {})[key] || 0,
      children: result.fields[key]
    };
  });
  var buttonsArray = Object.keys(result.buttons).map(key => {
    var _result$buttons$key;
    return {
      name: key,
      index: ((_result$buttons$key = result.buttons[key]) == null || (_result$buttons$key = _result$buttons$key.props) == null ? void 0 : _result$buttons$key.index) || (result.$$index || {})[key] || 0,
      children: result.buttons[key]
    };
  });
  var blocksArray = Object.keys(result.blocks).map(key => {
    var _result$blocks$key;
    return {
      name: key,
      index: ((_result$blocks$key = result.blocks[key]) == null || (_result$blocks$key = _result$blocks$key.props) == null ? void 0 : _result$blocks$key.index) || (result.$$index || {})[key] || 0,
      children: result.blocks[key]
    };
  });
  return _extends({}, result, {
    data: _extends({}, result.data, {
      fields: fieldsArray,
      buttons: buttonsArray,
      blocks: blocksArray
    })
  });
}
export var useStore = () => {
  return useContext(Context);
};
export var Provider = _ref => {
  var {
    children,
    render
  } = _ref;
  var [state, dispatch] = useReducer(reducer, initialState);
  return /*#__PURE__*/_jsx(Context.Provider, {
    value: _extends({}, state, {
      dispatch
    }),
    children: children
  });
};
Provider.displayName = 'Login.Provider';